package org.iplantc.workflow.experiment;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.iplantc.persistence.dto.step.TransformationStep;
import org.iplantc.workflow.WorkflowException;
import org.iplantc.workflow.client.OsmClient;
import org.iplantc.workflow.core.TransformationActivity;
import org.iplantc.workflow.dao.DaoFactory;
import org.iplantc.workflow.data.DataObject;
import org.iplantc.workflow.model.Property;
import org.iplantc.workflow.model.PropertyGroup;
import org.iplantc.workflow.model.Template;

/**
 * Obtains the values of properties that were used in job submission requests.
 * 
 * @author Dennis Roberts
 */
public class PropertyValueRetriever {

    /**
     * Used to log error and informational messages.
     */
    private static final Logger LOG = Logger.getLogger(PropertyValueRetriever.class);

    /**
     * Used to communicate with the OSM.
     */
    private OsmClient osmClient;

    /**
     * Used to obtain data access objects.
     */
    private DaoFactory daoFactory;

    /**
     * @param osmClient used to communicate with the OSM.
     * @param daoFactory used to obtain data access objects.
     */
    public PropertyValueRetriever(OsmClient osmClient, DaoFactory daoFactory) {
        this.osmClient = osmClient;
        this.daoFactory = daoFactory;
    }

    /**
     * Gets the property values for a job.
     * 
     * @param jobUuid the job identifier.
     * @return a JSON object representing the list of property values.
     */
    public JSONObject getPropertyValues(String jobUuid) {
        JSONObject experiment = retrieveExperiment(jobUuid);
        TransformationActivity app = getApp(experiment.getString("analysis_id"));
        return getPropertyValues(experiment.getJSONObject("config"), app);
    }

    /**
     * Gets the property values for an app.
     * 
     * @param config the job submission property value information.
     * @param app the app.
     * @return a JSON object representing the list of property values.
     */
    private JSONObject getPropertyValues(JSONObject config, TransformationActivity app) {
        JSONObject result = new JSONObject();
        JSONArray properties = new JSONArray();
        addPropertyValues(properties, config, app);
        result.put("parameters", properties);
        return result;
    }

    /**
     * Adds the property values for an app to the list of property values.
     * 
     * @param properties the list of property values.
     * @param config the job submission property value information.
     * @param app the app.
     */
    private void addPropertyValues(JSONArray properties, JSONObject config, TransformationActivity app) {
        for (TransformationStep step : app.getSteps()) {
            addPropertyValues(properties, config, step);
        }
    }

    /**
     * Adds the property values for a single step in an app to the list of property values.
     * 
     * @param properties the list of property values.
     * @param config the job submission property value information.
     * @param step the app.
     */
    private void addPropertyValues(JSONArray properties, JSONObject config, TransformationStep step) {
        Template template = getTemplate(step.getTemplateId());
        for (PropertyGroup group : template.getPropertyGroups()) {
            for (Property prop : group.getProperties()) {
                properties.add(formatPropertyValue(prop, step.getName(), config));
            }
        }
        for (DataObject input : template.findUnreferencedInputs()) {
            String value = getPropertyValue(config, step.getName(), input.getId());
            if (!StringUtils.isBlank(value)) {
                properties.add(formatAutoGeneratedPropertyValue(input, value));
            }
        }
    }

    /**
     * Formats the value of a property that is automatically generated for an input.
     * 
     * @param input the input.
     * @param value the value specified for the input.
     * @return the formatted property information.
     */
    private JSONObject formatAutoGeneratedPropertyValue(DataObject input, String value) {
        JSONObject result = new JSONObject();
        result.put("param_id", input.getId());
        result.put("param_name", input.getName());
        result.put("param_value", value);
        result.put("param_type", "Input");
        result.put("info_type", getInfoTypeName(input));
        result.put("data_format", getDataFormatName(input));
        return result;
    }

    /**
     * Formats the value of a property.
     * 
     * @param prop the property.
     * @param stepName the name of the step within the app.
     * @param config the job submission property value information.
     * @return the formatted property value information.
     */
    private JSONObject formatPropertyValue(Property prop, String stepName, JSONObject config) {
        JSONObject result = new JSONObject();
        result.put("param_id", prop.getId());
        result.put("param_name", prop.getName());
        result.put("param_value", getPropertyValue(config, stepName, prop.getId()));
        result.put("param_type", prop.getPropertyTypeName());
        result.put("info_type", getInfoTypeName(prop.getDataObject()));
        result.put("data_format", getDataFormatName(prop.getDataObject()));
        return result;
    }

    /**
     * Gets the value of a property from the job submission property value information.
     * 
     * @param config the job submission property value information.
     * @param stepName the name of the step within the app.
     * @param propId the property identifier.
     * @return the property value.
     */
    private String getPropertyValue(JSONObject config, String stepName, String propId) {
        String key = stepName + "_" + propId;
        String result = config.optString(key, null);
        if (result == null) {
            LOG.warn("no property value specified for property " + key);
            return "";
        }
        else {
            return result;
        }
    }

    /**
     * Gets the name of the info type associated with a data object.
     * 
     * @param dataObject the data object.
     * @return the info type name or the empty string if the data object is null or has no info type.
     */
    private String getInfoTypeName(DataObject dataObject) {
        return dataObject == null ? "" : dataObject.getInfoTypeName();
    }

    /**
     * Gets the name of the data format associated with a data object.
     * 
     * @param dataObject the data object.
     * @return the data format name or the empty string if the data object is null or has no data format.
     */
    private String getDataFormatName(DataObject dataObject) {
        return dataObject == null ? "" : dataObject.getDataFormatName();
    }

    /**
     * Retrieves the job submission information associated with a job.
     * 
     * @param jobUuid the job identifier.
     * @return the job submission information.
     */
    private JSONObject retrieveExperiment(String jobUuid) {
        JSONObject queryResults = osmClient.query(buildExperimentQuery(jobUuid));
        JSONArray objects = queryResults.getJSONArray("objects");
        if (objects.size() < 1) {
            String msg = "no job submission information found for " + jobUuid;
            LOG.error(msg);
            throw new WorkflowException(msg);
        }
        return objects.getJSONObject(0).getJSONObject("state").getJSONObject("experiment");
    }

    /**
     * Builds the OSM query that will be used to search for the job submission information.
     * 
     * @param jobUuid the job identifier.
     * @return the OSM query.
     */
    private JSONObject buildExperimentQuery(String jobUuid) {
        JSONObject query = new JSONObject();
        query.put("state.jobUuid", jobUuid);
        return query;
    }

    /**
     * Retrieves the app with the given identifier.
     * 
     * @param appId the app identifier.
     * @return the app.
     * @throws WorkflowException of the app can't be found.
     */
    private TransformationActivity getApp(String appId) {
        TransformationActivity app = daoFactory.getTransformationActivityDao().findById(appId);
        if (app == null) {
            String msg = "app " + appId + " not found";
            LOG.error(msg);
            throw new WorkflowException(msg);
        }
        return app;
    }

    /**
     * Retrieves the template with the given identifier.
     * 
     * @param templateId the template identifier.
     * @return the template.
     * @throws WorkflowException if the template can't be found.
     */
    private Template getTemplate(String templateId) {
        Template template = daoFactory.getTemplateDao().findById(templateId);
        if (template == null) {
            String msg = "template " + templateId + " not found";
            LOG.error(msg);
            throw new WorkflowException(msg);
        }
        return template;
    }
}
