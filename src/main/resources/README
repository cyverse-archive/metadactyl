
==========================================================
 iPlant - Core Software - Workflow Database Schema Archive
==========================================================

Getting Help
************

  For a brief help message, do this:

  perl db_init.pl --help

  For a full listing of the manual page, do this:

  perl db_init.pl --man

Doing a database initialization
*******************************

  In the simplest case (that is, when all of the default settings are being
  used), this command can be used to initialize the discovery environment user
  database for MySQL:

  perl db_init.pl

  Similarly, when all of the default settings are being used, this command can
  be used to initialize the discovery environment user database for PostgreSQL:

  perl db_init.pl -p

  Command-line options may be used to alter the behavior of the utility.  See
  the utility's help screen and manual page for more details.

Adding a new SQL script
***********************

  To add a new SQL script to the utility, first create the script then add its
  name to the @sql_scripts array in db_init.pl.  The scripts are executed in
  the order in which they appear in the array,

Supporting a new DBMS
*********************

  To support a previously unsupported database management system, two things
  have to happen.  The first step is to modify db_init.pl to support the
  command-line option used to select the new DBMS.  For example, to add
  support for a new DBMS called FooSQL, you could add the following line to
  the call to GetOptions() in db_init.pl:

  'foosql|f'     => sub { $dbms = 'FooSQL' },

  This allows the user to select the new DBMS by using either the --foosql
  option or the -f option.  (Before adding new options, please be sure to
  check for possible conflicts.)  Also note that the usage message, the help
  message and the POD (that is, Plain Old Documentation) need to be updated
  to reflect the new command-line options.

  The second step is to define a simple class that knows how to talk to the
  new DBMS.  This class must be a subclass of Database and its name must
  match the value of the $dbms variable when this DBMS is selected.  For
  instance, the class name would have to be 'FooSQL' for the example DBMS from
  above.  This class must implement four methods:

    validate_environment()

    This method verifies that the environment meets the minimum requirements
    to execute the script.  For example, the PostgreSQL and MySQL, classes
    both verify that the required files are present.

    clear_database()

    This method clears the existing database by dropping all of the tables in
    the database.

    change_database_ownership()

    When applicable, this method is used to change the owner of the selected
    database to the selected user.  If the DBMS does not support database
    ownership then an empty version of this subroutine must be implemented. 

    run_database_scripts()

    This method runs the database initialization scripts.

  Note that the database scripts are currently shared for all of the supported
  database management systems.  If it ever becomes necessary to have different
  scripts for different database management systems then portions of this
  utility will have to be rewritten.
